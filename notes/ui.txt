Goal
- Create a Web UI to demo the tool
- Likely will not need things like DB or API, etc
- Likely wont be allowing NEW contracts. Just work with the ones we have
- mainly just want a nicer demo interface

Flow
- show the NL template - have the option to view the Symboleo
- Choose a parameter to refine. 
- Select input tokens - static/dybnamic/etc
- Run updates - show the updated contract and Symboleo



https://realpython.com/python-web-applications/#build-a-basic-python-web-application


TODO for today 
- get the app running - DONE
- display a contract NL and sym - DONE
- integrate bootstrap - DONE
- cleaner (formatted) display of NL and Sym - DONE
- ability to select contract from a menu/explorer - DONE

This week
- base templates - DONE
- add a parameter input box - DONE
- demo a sample input 

parameter input
- select a parameter from a dropdown - this will need to load some results
- Then as we build the input, need to update (ajax, partials, async, etc.) - thats the challenge
-- each input will trigger some functionality... need to go back to lib and get children
- Then when we're done... need a submit button - Make the update 
-- Ideally, we would highlight what has been changed - that will require more interaction... might be a bonus 


Next week
- allow for custom input 
- add an info page
- make it more interactive 
- host it 


=====
Calls
- select_parameter
-- ajax call
-- input: user selects parm from dropdown (nl_key, parm_key)
-- may also require us to store the contract in the session
-- get any relevant parm config info, and the first input children 
-- might also fetch the norm and store it in the session (or elsewhere)
-- return: valid children 

- entering_input
-- user will be presented with the possible input tokens
-- they will select one. 
--- if static, then done
--- if dynamic, then enter a value 

- sending next_input
-- once the value is entered, it is sent off by the user
-- send: new value, unit type, contract id, norm id, etc
-- fetch the next children (will require an interface to child_getter, etc)
- return next_children. Present them to the user
** May also do a frame check... verify if the frame is complete... allows user to submit

- completing input 
-- once the input is complete (And potentially verified by frame checker), user can submit 
-- This will now run the contract updater 
-- will refresh the page with updated parms 

