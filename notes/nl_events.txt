There is some room for improvement on the NL events
- the pattern_class.to_event functionality makes the most sense I think

The big one is when we want to reference an existing obligation (e.g. obligation violated)
- The user will select EVENT -> NORM_EVENT -> OBLIGATION_SUBJECT -> OBLIGATION_ACTION

- we only want them to specify the nl_key and the event
-- nl_key comes from NL Template - this means we can only have one obligation per string.
-- thats okay, but need to acknowledge the limitation

- the nl_key will be used to get the obligation variable
- from there we get the event declaration on the consequent
- this means that each event declaration needs a customEvent object
-- we have the functionality for this, just need to add it in to test cases

- so we need to get the custom event, which has a to_text functionality
- then if we have a violation, we also need to update that as well - update th "negation" property of the CustomEvent

- The tough part is going to be when we need to use different verb tenses. 
- Weve thought about this before, and thats why we have it as an argument 

So the proper way to do this
- add nl_event to the EventPatternClass
- add to_text to the event pattern class 
- use the to_text for the contract NL update
- 