== UNTIL DATE == 
- this one might actually be a HappensWithin?
- Let's get rid of this one... It's ambiguous. There are less ambiguous ways to express the same thing
- e.g. the goods must be delivered until DATE - doesnt make sense 

What about a "from DATE until DATE"
- still doesnt really make sense
- Between DATE and DATE makes way more sense - that works well with a HappensWithin 

I think the UNLESS_EVENT pattern is more straightforward as adding the extra norm...

UNTIL_EVENT ==> add the norm 
UNLESS_EVENT ==> add the norm 

Need to make the default_event more dynamic. Should have the ability to carry a few pieces

== DM prop ==
Lets start with the toy example: delivery must be made using a van:
- The Seller shall deliver the Order in one delivery to the Buyer [DELIVERY_REFINEMENT]
- DELIVERY_REFINEMENT = "using a van"
- pattern: USING NOUN
- result: add a property called "method" to the target event

Places to add the NLP
- on the user input - validation
- on the build_frame
- on the to_obj

Do validation on the user input to ensure they enter something legit
- then we may need to adjust the value depending on the frame or object, so we can use further nlp There
- for now, lets try to use wordnet to get some sense of an "instrument"
- would prefer to have it in one place - so we can centralize the NLP functionality - but that may not work out.

== CANT HANDLE ==

I should prob start making up a list of patterns found in contracts (with examples) that I CANNOT handle
- explain why - could it be done in the future? estimate the complexity.

there are a few from the sample contract that are challenging
- disclosure text: 'Both Seller and Buyer must keep the contents of this contract confidential for [CONFIDENTIALITY_MONTHS] months following the termination of the contract'
- the wording of this one ends up being a little awkward. The way its framed in the contract is that its an obligation that disclosure cannot happen
- so we got from "keep the contents confidential" to "shall not disclose". Essentially these mean the same thing, so this is okay
- It becomes a negation. 
- It seems like the pattern "FOR TIMESPAN AFTER TIMEPOINT" really only works for negation
- e.g. it wouldnt really make sense to say: The seller must disclose the contents for 6 months after...
- It is framed as a "disclosing" event that must not happen.
- Since this pattern has some ambiguity, we should probably exclude it - unfortunate
- We can get away with using the WITHIN - it's a little more awkwardly worded, but its semantically sound

Another challenge is the resumption:
- If payment is not completed, the Seller may suspend performance of all of its obligations under the agreement until payment is completed
- Ideally I could take two parameters here: the trigger and the "until" phrase. 
- But since the act of resuming the obligation is completely implicit here, the "until" phrase would be very difficult to unpack
- "Until" can also be quite ambiguous in it usage. 
- We therefore just avoid this case. 
- We could potentially set up a separate operation for this case - and the "until" might be the only frame that's allowed for this type of parameter... 
- It would be "UNTIL EVENT", and it would fill in the condition for resuming the obligation