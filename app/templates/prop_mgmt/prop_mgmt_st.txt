DOMAIN MODEL:

== Roles ==
Manager
- address (str)
- name (str)

Owner
- address (str)
- name (str)


== Assets ==
Property (None)
- address (str)


== Events ==
Evt_advertise
- agent (Role)
- property (Property) 

Evt_reimburse
- from (Role)
- to (Role)

Evt_notify_expense
- from (Role)
- to (Role)

Evt_collection
- agent (Role)
- property (Property)

Evt_provide_invoice
- from (Role)
- to (Role)

Evt_legal_proceeding_necessary

Evt_handle_proceeding
- agent (Role)

Evt_disburse
- from (Role)
- to (Role)

Evt_termination_reimburse
- from (Role)
- to (Role)

- Evt_written_notice
- days (num)

CONTRACT SPEC:

== Obligations ==
ob_advertise: O(manager, owner, T, Happens(evt_advertise))
- The Manager shall advertise the Property for rent, engage and screen potential renters, enter into rental agreement(s) with acceptable renter(s). 
- * Could create several obligations out of this - split it up?

ob_reimburse: O(owner, manager, T, Happens(evt_reimburse))
- The Owner shall reimburse the Manager for all expenses related to such Advertising. 

ob_notify_expense: O(manager, owner, T, Happens(evt_notify_expense))
- The Manager shall notify the Owner, in advance, of anticipated expenses related to such Advertising.

ob_collection: O(manager, owner, T, Happens(evt_collection))
- The Manager shall be responsible for all collection of Rent earned on the Property. 
- ** This is more like a recurring event...

... Some more basic ones...

ob_invoice: O(manager, owner, T, Happens(evt_provide_invoice))
- The Manager shall provide the Owner invoices of the actual costs.
- ** Should each invoicing be a separate event and tied to a specific purchase event?

ob_legal_proceedings: Happens(evt_legal_proceeding_necessary) -> O(manager, owner, T, Happens(evt_handle_proceeding))
- In the event that collection and/or legal proceedings become necessary with regard to the rental of the Property, The Manager shall handle all such proceedings. 
- * coreferences in the two clauses

ob_disburse: Happens(terminate(self)) -> O(manager, owner, T, HappensBefore(evt_disburse, date.add(terminates(self), DISBURSEMENT_DAYS, days)))
- Upon termination, the Manager shall disburse to the Owner any monies in the Managerâ€™s possession due and owing to the Owner within {DISBURSEMENT_DAYS} days from the date of termination. 

ob_termination_reimburse: O(owner, manager, T, HappensBefore(evt_termination_reimburse, date.add(terminates(self), REIMBURSEMENT_DAYS, days)))
- The Owner shall reimburse the Manager for any expenses incurred or approved prior to the date of termination within {REIMBURSEMENT_DAYS} days from the date of termination.


== Powers ==

pow_termination: Happens(evt_written_notice(role), t) -> P(role, ~role, T, Happens(terminate(self)), t + TERMINATION_NOTICE_DAYS days)
- This Agreement may be terminated at any time by either Party upon {TERMINATION_NOTICE_DAYS} days written notice to the other Party. 
- * Need to figure out how we're handling this one - it's very common



INSTANTIATION:

== Input Variables ==
- MANAGER_ADDRESS (str): 123 Test Street
- MANAGER_NAME (str):
- OWNER_ADDRESS (str): 99 Fake Avenue
- OWNER_NAME (str): 
- PROPERTY_ADDRESS (str):
- DISBURSEMENT_DAYS (num):
- REIMBURSEMENT_DAYS (num):
- TERMINATION_NOTICE_DAYS (num):

== Calculated ==
- manager = Manager(address=MANAGER_ADDRESS, name=MANAGER_NAME)
- owner = Owner(address=OWNER_ADDRESS, name=OWNER_NAME) 
- property = Property(PROPERTY_ADDRESS)

== Events ==
- evt_advertise: Evt_advertise(agent=manager, property=property)
- evt_reimburse: Evt_reimburse(from=owner, to=manager)
- evt_notify_expense: Evt_notify_expense(sender=manager, recipient=owner)
- evt_collection: Evt_collection(agent=manager, property=property)
- evt_provide_invoice: Evt_provide_invoice(from=manager, to=owner)
- evt_legal_proceeding_necessary: Evt_legal_proceeding_necessary()
- evt_handle_proceeding: Evt_handle_proceeding(agent=manager)
- evt_disburse: Evt_disburse(from=manager, to=owner)
- evt_termination_reimburse: Evt_termination_reimburse(from=owner, to=manager)
- evt_written_notice: evt_written_notice(days=TERMINATION_NOTICE_DAYS)
