DOMAIN MODEL:

== Roles ==
seller
- address (str)
- name (str)

buyer
- address (str)
- name (str)

== Assets ==
Goods (None)


== Events ==

Evt_sell
- seller (Role)
- buyer (Role)
- item (Goods)
- amount (Price)

Evt_delivery

Evt_provide_invoice
- provider (Role)
- recipient (Role)

Evt_pay_invoice
- to (Role)
- from (Role)

Evt_late_payment
- to (Role)
- from (Role)
- amount (Price)

Evt_pay_shipping
- payer (Role)

Evt_realize_inability
- agent (Role)

Evt_notify_inability
- sender (Role)
- recipient (Role)

Evt_provides_notice
- sender (Role)
- recipient (Role)


CONTRACT SPEC:

== Obligations ==
ob_sell: O(seller, buyer, T, Happens(evt_sell))
- The Seller hereby agrees to sell the Goods to the Customer for an amount of {SALE_PRICE}.

ob_provide_invoice: Happens(evt_delivery, t) -> O(seller, buyer, T, Happens(evt_provide_invoice, t))
- The Seller will provide an invoice to the Customer at the time of the delivery.
- * May want a HappensImmediately?? 

ob_pay_invoice: O(buyer, seller, T, HappensBefore(evt_pay_invoice, date.add(activates(self), INVOICE_PAYMENT_DAYS, days)))
- All invoices are to be paid in full at least within {INVOICE_PAYMENT_DAYS} days.

ob_late_charge: Violates(obligations.ob_pay_invoice) -> O(buyer, seller, T, Happens(evt_late_payment))
- Any balances not paid within {INVOICE_PAYMENT_DAYS} days will be subject to a {PAYMENT_PENALTY_PERCENT} percent late payment penalty.

ob_pay_shipping: O(SHIPPING_PAYER, ~SHIPPING_PAYER, T, Happens(evt_pay_shipping))
- The shipping method will be decided by the {SHIPPING_METHOD_DECIDER} and {SHIPPING_PAYER} will be responsible for the costs of the shipment.
- * Need to inject a role...

ob_notify: Happens(evt_realize_inability) -> O(seller, buyer, T, Happens(evt_notify_inability))
- The Seller will notify the Customer immediately upon realization that it will not be able to deliver the Goods as promised.


== Powers ==
pow_inability_termination: Happens(evt_notify_inability) -> P(role, ~role, T, Happens(terminates(self)))
- Upon such notice, either Party may terminate this Agreement.

pow_termination: Happens(evt_provides_notice) -> P(role, ~role, T, terminates(self))
- This Agreement may be terminated by either party or both Parties at any instant provided that the terminating party provides a written notice of termination {TERMINATION_NOTICE_DAYS} days in advance.


INSTANTIATION:

== Input Variables ==
- SELLER_ADDRESS (str): 123 Test Street
- SELLER_NAME (str): 
- BUYER_ADDRESS (str): 99 Fake Avenue
- BUYER_NAME (str): 
- SALE_PRICE (Price): 
- INVOICE_PAYMENT_DAYS (num): 
- PAYMENT_PENALTY_PERCENT (num):
- SHIPPING_METHOD_DECIDER (Role):
- SHIPPING_PAYER (Role):
- TERMINATION_NOTICE_DAYS (num):

== Calculated ==
- seller = Seller(address=SELLER_ADDRESS, name=SELLER_NAME)
- buyer = Buyer(address=BUYER_ADDRESS, name=BUYER_NAME) 
- goods = Goods()
- LATE_PAYMENT_AMOUNT = SALE_PRICE * PAYMENT_PENALTY_PERCENT / 100

== Events ==
- evt_sell: Evt_sell(seller=seller, buyer=buyer, item=Goods, amount=SALE_PRICE)
- evt_delivery: Evt_delivery()
- evt_provide_invoice: Evt_provide_invoice(provider=seller, recipient=buyer)
- evt_pay_invoice: Evt_pay_invoice(from=buyer, to=seller)
- evt_late_payment: Evt_late_payment(from=buyer, to=seller, amount=LATE_PAYMENT_AMOUNT)
- evt_pay_shipping: Evt_pay_shipping(payer=SHIPPING_PAYER)
- evt_realize_inability: Evt_realize_inability(agent=seller)
- evt_notify_inability: Evt_notify_inability(sender=seller, recipient=buyer)
- evt_provides_notice: Evt_provide_notice(sender=role, recipient=~role, days_in_advance=TERMINATION_NOTICE_DAYS)
