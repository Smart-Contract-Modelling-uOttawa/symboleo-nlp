Domain meatSaleDomain
  Seller isA Role;
  Buyer isA Role;
  Currency isAn Enumeration(CAD, USD, EUR);
  MeatQuality isAn Enumeration(PRIME, AAA, AA, A);
  PerishableGood isAn Asset with quantity: Number, unit: String;
  Meat isA PerishableGood with quality: MeatQuality;
  Deliver isAn Event with item: Meat, deliverer: Role, recipient: Role;
  Pay isAn Event with amount: Number, currency: Currency, from: Role, to: Role;
  PayLate isAn Event with amount: Number, currency: Currency, from: Buyer, to: Seller;
  Disclose isAn Event;

endDomain

Contract MeatSale( buyer_id: Buyer, seller_id: Seller, quantity: Number, quantity_unit: String, quality: MeatQuality, amount: Number, currency: Currency, interest_rate: Number )

Declarations
  seller: Seller;
  buyer: Buyer;
  goods: Meat with quantity := 100, unit := "kilograms", quality := MeatQuality(PRIME);
  evt_deliver: Deliver with item := goods, deliverer := seller, recipient := buyer;
  evt_pay_late: PayLate with amount := "(1 + 8 / 100) * 100", currency := Currency(CAD), from := buyer, to := seller;
  evt_pay: Pay with amount := 100, currency := Currency(CAD), from := buyer, to := seller;
  evt_disclose: Disclose;

Preconditions
  IsOwner(goods, seller);

Postconditions
  IsOwner(goods, buyer) and not IsOwner(goods, seller);

Obligations
  ob_delivery: Obligation(seller, buyer, true, SHappensBefore(evt_deliver, "March 18, 2024"));
  ob_payment: Obligation(buyer, seller, true, SHappensBefore(evt_pay, "March 30, 2024"));
  ob_late_payment: Obligation(buyer, seller, Happens(Violated(obligations.ob_payment)), Happens(evt_pay_late));

Surviving Obligations
  so_disclosure_seller: SO(seller, buyer, true, not HappensWithin(evt_disclose, Interval(START, Date.add(Terminated(self), 6, months)));
  so_disclosure_buyer: SO(buyer, seller, true, not HappensWithin(evt_disclose, Interval(START, Date.add(Terminated(self), 6, months)));

Powers
  pow_suspend_delivery: Power(seller, buyer, Happens(Violated(obligations.ob_payment)), Suspended(obligations.ob_delivery));
  pow_terminate_contract: Power(buyer, seller, true, Terminated(self));
  pow_resume_ob_delivery: Happens(Fulfilled(obligations.ob_late_payment)) -> Power(buyer, seller, true, Resumed(obligations.ob_delivery));

Constraints
  not IsEqual(buyer, seller);
  CannotBeAssigned(suspendDelivery);
  CannotBeAssigned(resumeDelivery);
  CannotBeAssigned(terminateContract);
  CannotBeAssigned(delivery);
  CannotBeAssigned(payment);
  CannotBeAssigned(latePayment);

endContract