Domain gridironDomain
  Seller isA Role with name: String;
  Buyer isA Role with name: String;
  ThirdParty isA Role with name: String;
  Biomass isAn Asset with quantity: Number, cannabidiol_percent: Number, thc_percent: Number;
  None isAn Asset;
  Payment isAn Event with agent: Role, receiver: Role, amount: Number, currency: Currency;
  Quarantine isAn Event with product: Biomass;
  Delivery isAn Event with from: Role, to: Role, product: Biomass, location: String;
  LegalNotice isAn Event with agent: Role, receiver: Role;
  ReturnInfo isAn Event with agent: Role, receiver: Role;
  DiscloseInfo isAn Event with agent: Role;
  Determines isAn Event with determineing_agent: Role, determineed_object: None;
  Files isAn Event with None: None, fileed_object: None;

endDomain

Contract Gridiron( buyer: Buyer, seller: Seller, third_party: ThirdParty, v_quantity: Number, v_cannabidiol_percent: Number, v_thc_percent: Number, v_currency: Currency, v_shipping_location: String )

Declarations
  seller: Seller with name := Shi Farms;
  buyer: Buyer with name := Gridiron;
  third_party: ThirdParty with name := Legal Third Party;
  biomass: Biomass with quantity := v_quantity, cannabidiol_percent := v_cannabidiol_percent, thc_percent := v_thc_percent;
  evt_payment: Payment with agent := buyer, receiver := seller, amount := v_amount, currency := v_currency;
  evt_delivery_lab: Delivery with from := seller, to := buyer, product := biomass, location := lab specified by Gridiron;
  evt_delivery_processor: Delivery with from := seller, to := buyer, product := biomass, location := processor;
  evt_legal_notice_buyer: LegalNotice with agent := third_party, receiver := buyer;
  evt_legal_notice_seller: LegalNotice with agent := third_party, receiver := seller;
  evt_return_info_buyer: ReturnInfo with agent := buyer, receiver := seller;
  evt_return_info_seller: ReturnInfo with agent := seller, receiver := buyer;
  evt_disclose_info_buyer: DiscloseInfo with agent := buyer;
  evt_disclose_info_seller: DiscloseInfo with agent := seller;
  that third party analysis of the Biomass is required for processing: None;
  evt_determines: Determines with determineing_agent := buyer, determineed_object := that third party analysis of the Biomass is required for processing;
  third party: None;
  claim: None;
  evt_files: Files with None := third party, fileed_object := claim;

Preconditions

Postconditions

Obligations
  ob_payment: Happens(Activated(self)) -> Obligation(buyer, seller, true, Happens(evt_payment));
  ob_delivery_lab: Happens(evt_determines) -> Obligation(seller, buyer, true, Happens(evt_delivery_lab));
  ob_delivery_processor: Obligation(seller, buyer, true, Happens(evt_delivery_processor));
  ob_legal_proceeding_buyer: Happens(evt_files) -> Obligation(third_party, buyer, true, Happens(evt_legal_notice_buyer));
  ob_legal_proceeding_seller: Happens(evt_files) -> Obligation(third_party, seller, true, Happens(evt_legal_notice_seller));
  ob_return_info_buyer: Happens(Terminated(self)) -> Obligation(buyer, seller, true, Happens(evt_return_info_buyer));
  ob_return_info_seller: Happens(Terminated(self)) -> Obligation(seller, buyer, true, Happens(evt_return_info_buyer));
  ob_disclose_info_buyer: Happens(Terminated(self)) -> Obligation(buyer, seller, true, not Happens(evt_disclose_info_buyer));
  ob_disclose_info_seller: Happens(Terminated(self)) -> Obligation(seller, buyer, true, not Happens(evt_disclose_info_seller));

Surviving Obligations
  ob_disclose_info_buyer: Obligation(buyer, seller, true, not Happens(evt_disclose_info_buyer));
  ob_disclose_info_seller: Obligation(seller, buyer, true, not Happens(evt_disclose_info_seller));

Powers
  pow_termination_buyer: Power(buyer, seller, true, Terminated(self));
  pow_termination_seller: Power(seller, buyer, true, Terminated(self));

Constraints

endContract