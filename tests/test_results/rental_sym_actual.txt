Domain propertyRentalDomain
  Landlord isA Role with name: String;
  Renter isA Role with name: String;
  Currency isAn Enumeration(CAD, USD, EUR);
  PaymentMethod isAn Enumeration(Cash, Cheque, ETransfer);
  RentalProperty isAn Asset with address: String;
  None isAn Asset;
  Property isAn Asset;
  Other isAn Asset;
  Paid isAn Event with amount: Number, currency: Currency, paymentMethod: PaymentMethod, from: Role, to: Role;
  KeepPets isAn Event with agent: Role;
  DatePasses isAn Event with date: Date;
  Occupy isAn Event with None: None, occupied_object: Property;
  Allow isAn Event with None: None, allowed_object: Other;
  Provide3 Days In Advance isAn Event with None: None, provided_object: None;
  Abandon isAn Event with None: None, abandoned_object: Property;

endDomain

Contract PropertyRental( landlord: Landlord, renter: Renter, the_address: String, the_currency: Currency, the_rent_amount: Number, the_payment_method: PaymentMethod, the_late_fine: Number, the_deposit_amount: Number, X: Date )

Declarations
  the_property: RentalProperty with address := the_address;
  evt_date_passes: DatePasses with date := X;
  evt_pay_rent: Paid with amount := the_rent_amount, currency := the_currency, paymentMethod := the_payment_method, from := renter, to := landlord;
  evt_pay_late_fine: Paid with amount := the_late_fine, currency := the_currency, paymentMethod := the_payment_method, from := renter, to := landlord;
  evt_pay_deposit: Paid with amount := the_deposit_amount, currency := the_currency, paymentMethod := the_payment_method, from := renter, to := landlord;
  evt_return_deposit: Paid with amount := the_deposit_amount, currency := the_currency, paymentMethod := the_payment_method, from := landlord, to := renter;
  evt_keep_pets: KeepPets with agent := renter;
  renter: None;
  property: Property;
  evt_occupy: Occupy with None := renter, occupied_object := property;
  landlord: None;
  pets: Other;
  evt_allow: Allow with None := landlord, allowed_object := pets;
  termination notice: None;
  evt_provide3_days_in_advance: Provide3 Days In Advance with None := landlord, provided_object := termination notice;
  evt_abandon: Abandon with None := renter, abandoned_object := property;

Preconditions

Postconditions

Obligations
  ob_pay_rent: Happens(evt_date_passes) -> Obligation(renter, landlord, true, Happens(evt_pay_rent));
  ob_late_payment: Happens(Violated(obligations.ob_pay_rent)) -> Obligation(renter, landlord, true, Happens(evt_pay_late_fine));
  ob_pay_security_deposit: Obligation(renter, landlord, true, WhappensBeforeE(evt_pay_deposit, evt_occupy));
  ob_return_deposit: Happens(Terminated(self)) -> Obligation(landlord, renter, true, Happens(evt_return_deposit));
  ob_no_pets: Obligation(renter, landlord, true, not Happens(evt_keep_pets));

Surviving Obligations

Powers
  pow_suspend_ob_no_pets: Happens(evt_allow) -> Power(landlord, renter, true, Suspended(obligations.ob_no_pets));
  pow_termination_written: Happens(evt_provide3_days_in_advance) -> Power(renter, landlord, true, Terminated(self));
  pow_termination_abandon: Happens(evt_abandon) -> Power(landlord, renter, true, Terminated(self));

Constraints

endContract