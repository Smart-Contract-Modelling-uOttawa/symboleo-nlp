Domain rentalDomain
  Landlord isA Role;
  Renter isA Role;
  Currency isAn Enumeration(CAD, USD, EUR);
  RentalProperty isAn Asset with address: String;
  SecurityDeposit isAn Asset with amount: Number, currency: Currency;
  Authorization isAn Asset;
  Pets isAn Asset;
  PayDeposit isAn Event with deposit: SecurityDeposit, from: Role, to: Role;
  PayAmount isAn Event with amount: Number, currency: Currency, from: Role, to: Role;
  KeepPet isAn Event with agent: Role;
  OccupyProperty isAn Event with occupying_agent: Role, occupied_object: RentalProperty;
  ProvideAuthorization isAn Event with providing_agent: Role, provided_object: Authorization, provide_detail: Pets;
  PayDepositLate isAn Event with paying_agent: Role, paid_object: SecurityDeposit;

endDomain

Contract rental( property_address: String, currency: Currency, extra_amount: Number, deposit_amount: Number )

Declarations
  renter: Renter;
  landlord: Landlord;
  property: RentalProperty with address := "[PROPERTY_ADDRESS]";
  security_deposit: SecurityDeposit with amount := [DEPOSIT_AMOUNT], currency := Currency([CURRENCY]);
  evt_pay_extra: PayAmount with amount := [EXTRA_AMOUNT], currency := Currency([CURRENCY]), from := renter, to := landlord;
  evt_pay_deposit: PayDeposit with deposit := security_deposit, from := renter, to := landlord;
  evt_keep_pet: KeepPet with agent := renter;
  evt_occupy_property: OccupyProperty with occupying_agent := renter, occupied_object := property;
  authorization: Authorization;
  pets: Pets;
  evt_provide_authorization: ProvideAuthorization with providing_agent := landlord, provided_object := authorization, provide_detail := pets;
  evt_pay_deposit_late: PayDepositLate with paying_agent := renter, paid_object := security_deposit;

Preconditions

Postconditions

Obligations
  ob_pay_deposit: O(renter, landlord, true, WhappensBefore(evt_pay_deposit, Date.add(evt_occupy_property, 2, weeks)));
  ob_pay_extra: O(renter, landlord, Happens(evt_pay_deposit_late), Happens(evt_pay_extra));
  ob_no_pets: O(renter, landlord, true, not Happens(evt_keep_pet));

Surviving Obligations

Powers
  pow_terminate_ob_no_pets: Happens(evt_provide_authorization) -> P(landlord, renter, true, Terminated(obligations.ob_no_pets));

Constraints

endContract