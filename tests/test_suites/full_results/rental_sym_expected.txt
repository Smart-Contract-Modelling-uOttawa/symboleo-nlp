Domain rentalDomain
  Landlord isA Role;
  Renter isA Role;
  Currency isAn Enumeration(CAD, USD, EUR);
  RentalProperty isAn Asset with address: String;
  SecurityDeposit isAn Asset with amount: Number, currency: Currency;
  PayDeposit isAn Event with deposit: SecurityDeposit, from: Role, to: Role;
  PayAmount isAn Event with amount: Number, currency: Currency, from: Role, to: Role;
  OccupyProperty isAn Event with agent: Role, property: RentalProperty;
  KeepPet isAn Event with agent: Role;
  AllowPets isAn Event with grantor: Role;

endDomain

Contract rental( property_address: String, currency: Currency, extra_amount: Number, deposit_amount: Number )

Declarations
  renter: Renter;
  landlord: Landlord;
  property: RentalProperty with address := "[PROPERTY_ADDRESS]";
  security_deposit: SecurityDeposit with amount := [DEPOSIT_AMOUNT], currency := Currency([CURRENCY]);
  evt_pay_extra: PayAmount with amount := [EXTRA_AMOUNT], currency := Currency([CURRENCY]), from := renter, to := landlord;
  evt_pay_deposit: PayDeposit with deposit := security_deposit, from := renter, to := landlord;
  evt_occupy_property: OccupyProperty with agent := renter, property := property;
  evt_keep_pet: KeepPet with agent := renter;
  evt_allow_pets: AllowPets with grantor := landlord;

Preconditions

Postconditions

Obligations
  ob_pay_deposit: O(renter, landlord, true, WhappensBeforeE(evt_pay_deposit, evt_occupy_property));
  ob_pay_extra: O(renter, landlord, Happens(Violated(obligations.ob_pay_deposit)), Happens(evt_pay_extra));
  ob_no_pets: O(renter, landlord, true, not Happens(evt_keep_pet));

Surviving Obligations

Powers
  pow_terminate_ob_no_pets: Happens(evt_allow_pets) -> P(landlord, renter, true, Terminated(obligations.ob_no_pets));

Constraints

endContract