Domain biomassDomain
  Seller isA Role with name: String;
  Buyer isA Role with name: String;
  Currency isAn Enumeration(CAD, USD);
  Biomass isAn Asset with quantity_lbs: Number;
  Location isAn Asset with name: String;
  Pay isAn Event with from: Role, to: Role, amount: Number, currency: Currency;
  Quarantine isAn Event with agent: Role, product: Biomass;
  RemoveQuarantine isAn Event with agent: Role, product: Biomass;
  DeterminesAnalysisRequired isAn Event with agent: Role;
  Delivery isAn Event with agent: Role, product: Biomass, location: Location;

endDomain

Contract biomass( seller_id: String, seller_name: String, buyer_id: String, buyer_name: String, biomass_quantity: Number, price: Number, currency: Currency )

Declarations
  Shi Farms: Seller;
  Gridiron: Buyer;
  biomass: Biomass with quantity_lbs := 30000;
  lab: Location;
  processor: Location;
  evt_pay: Pay with to := Shi Farms, from := Gridiron, amount := 150000, currency := Currency(USD);
  evt_quarantine: Quarantine with agent := Shi Farms, product := biomass;
  evt_remove_quarantine: RemoveQuarantine with agent := Shi Farms, product := biomass;
  evt_delivery_lab: Delivery with agent := Shi Farms, product := biomass, location := lab;
  evt_delivery_processor: Delivery with agent := Shi Farms, product := biomass, location := processor;
  evt_determine_analysis: DeterminesAnalysisRequired with agent := Gridiron;

Preconditions

Postconditions

Obligations
  ob_payment: Obligation(Gridiron, Shi Farms, Happens(Activated(self)), Happens(evt_pay));
  ob_quarantine: Obligation(Shi Farms, Gridiron, Happens(evt_pay), Happens(evt_quarantine));
  ob_keep_quarantine: Obligation(Shi Farms, Gridiron, Happens(evt_quarantine), not WhappensBeforeE(evt_remove_quarantine, evt_delivery_processor));
  ob_delivery_lab: Obligation(Shi Farms, Gridiron, Happens(evt_determine_analysis), Happens(evt_delivery_lab));

Surviving Obligations

Powers

Constraints

endContract