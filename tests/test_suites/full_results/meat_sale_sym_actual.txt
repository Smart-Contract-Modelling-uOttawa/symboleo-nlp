Domain meatSaleDomain
  Seller isA Role;
  Buyer isA Role;
  Currency isAn Enumeration(CAD, USD, EUR);
  MeatQuality isAn Enumeration(PRIME, AAA, AA, A);
  PerishableGood isAn Asset with quantity_kg: Number;
  Meat isA PerishableGood with quality: MeatQuality;
  Payment isAn Asset;
  Deliver isAn Event with item: Meat, deliverer: Role, recipient: Role;
  Pay isAn Event with amount: Number, currency: Currency, from: Role, to: Role;
  PayInterest isAn Event with amount: Number, currency: Currency, from: Buyer, to: Seller;
  Disclose isAn Event;
  MissPayment isAn Event with missing_agent: Role, missed_object: Payment;

endDomain

Contract MeatSale( buyer_id: String, seller_id: String, buyer_name: String, seller_name: String, quantity_kg: Number, quality: MeatQuality, amount: Number, currency: Currency, interest_rate: Number, ob_delivery_date: Date, ob_payment_date: Date )

Declarations
  seller: Seller;
  buyer: Buyer;
  goods: Meat with quantity_kg := 100, quality := MeatQuality(PRIME);
  evt_deliver: Deliver with item := goods, deliverer := seller, recipient := buyer;
  evt_pay_interest: PayInterest with amount := "(1 + 8 / 100) * 100", currency := Currency(CAD), from := buyer, to := seller;
  evt_pay: Pay with amount := 100, currency := Currency(CAD), from := buyer, to := seller;
  evt_disclose: Disclose;
  payment: Payment;
  evt_miss_payment: MissPayment with missing_agent := buyer, missed_object := payment;

Preconditions
  IsOwner(goods, seller);

Postconditions
  IsOwner(goods, buyer) and not IsOwner(goods, seller);

Obligations
  ob_delivery: O(seller, buyer, true, ShappensBefore(evt_deliver, ob_delivery_date));
  ob_payment: O(buyer, seller, true, ShappensBefore(evt_pay, ob_payment_date));
  ob_late_payment: O(buyer, seller, Happens(evt_miss_payment), Happens(evt_pay_interest));

Surviving Obligations
  so_disclosure_seller: O(seller, buyer, true, not HappensWithin(evt_disclose, Interval(Terminated(self), Date.add(Terminated(self), 6, months))));
  so_disclosure_buyer: O(buyer, seller, true, not HappensWithin(evt_disclose, Interval(Terminated(self), Date.add(Terminated(self), 6, months))));

Powers
  pow_suspend_delivery: P(seller, buyer, true, Suspended(obligations.ob_delivery));
  pow_terminate_contract: false -> P(buyer, seller, not Happens(Violated(obligations.ob_delivery)), Terminated(self));

Constraints
  not IsEqual(buyer, seller);
  CannotBeAssigned(suspendDelivery);
  CannotBeAssigned(resumeDelivery);
  CannotBeAssigned(terminateContract);
  CannotBeAssigned(delivery);
  CannotBeAssigned(payment);
  CannotBeAssigned(latePayment);

endContract