Domain test_dm
  PartyA isA Role;
  PartyB isA Role;
  Receipt isAn Asset;
  PayFees isAn Event;
  SubmitReceipt isAn Event with submitting_agent: Role, submitted_object: Receipt, submitting_target: Role;

endDomain

Contract test_cs(  )

Declarations
  Porex: PartyA;
  Cerus: PartyB;
  evt_pay_fees: PayFees;
  invoice_receipt: Receipt;
  evt_submit_receipt: SubmitReceipt with submitting_agent := Porex, submitted_object := invoice_receipt, submitting_target := Cerus;

Preconditions

Postconditions

Obligations
  ob_pay_fees: Obligation(Cerus, Porex, true, WhappensBefore(evt_pay_fees, Date.add(evt_submit_receipt, 10, days)));

Surviving Obligations

Powers

Constraints

endContract